version: '3.8'

services:
  database-service:
    container_name: mrunsten-solita-database-container
    build:
      dockerfile: database/Dockerfile
    env_file:
      - .env
    environment:
      PGDATA: /data/postgres
    volumes:
      - mrunsten-solita-database-volume:/data/postgres
    ports:
        # Note: Host address is bound mainly for the ease of development as there
        # is no special development version of this compose file created for now.
        #
        # During production the host port bound can be removed (=> ":5432")
      - "5432:5432"

  backend-service:
    container_name: mrunsten-solita-backend-container
    build:
      dockerfile: backend/Dockerfile
    depends_on:
      - database-service

    # Note: environment & env_file are not passed to the build step,
    # they are not stored inside the container image.
    environment:
      DATABASE_URL: "postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@database-service/$POSTGRES_DB"
      API_ADDRESS: "[::]:3000"
    env_file:
      - .env
    ports:
      # Note: No host address bound, only internal container network port available.
      - ":3000"

  frontend-service:
    container_name: mrunsten-solita-frontend-container
    build:
      dockerfile: frontend/Dockerfile
      args:
        # The system's environment variable for PUBLIC_API_ADDRESS
        # (usually from your .env file) is passed to the frontend
        # build (& run) container. This address is further passed
        # from the frontend container to HTTP clients, which use
        # this address to connect to the backend api.
        - PUBLIC_API_ADDRESS=$PUBLIC_API_ADDRESS

        # PRIVATE_API_ADDRESS is used by the frontend container's
        # SSR (server-side rendering) compiler to fetch data from the
        # backend api as it may not have access to the "public" api
        # address (such as localhost, as that is different inside the
        # frontend container).
        - PRIVATE_API_ADDRESS=http://backend-service:3000/api
    depends_on:
      - backend-service
    ports:
      # Note: No host address bound, only internal container network port available.
      - ":3000"

  reverse-proxy-service:
    container_name: mrunsten-solita-reverse-proxy-container
    build:
      dockerfile: reverse_proxy/Dockerfile
    ports:
      - "3000:80" # Reverse proxy exposed to docker host's port 3000 by default.
    depends_on:
      - backend-service
      - frontend-service

volumes:
  mrunsten-solita-database-volume:
    driver: local
